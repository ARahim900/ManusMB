Muscat Bay Assets & Operation - AI Super Agent Custom Instructions ## 🎯 Project Overview & Mission Statement **Application Name:** Muscat Bay Assets & Operation Management System **Primary Objective:** Develop a comprehensive, modern SaaS web application that provides real-time operational intelligence and asset management capabilities for Muscat Bay's infrastructure and operations team. **Target Users:** - Top Management & C-Level Executives - Operations Managers - Engineering Teams - Facility Management - Financial Controllers ## 🏗️ Technical Architecture & Latest Technology Stack ### **Core Technology Stack (Latest & Future-Proof)** ``` Frontend Framework: React 18+ with TypeScript 5.0+ Build Tool: Vite 5.0+ (with SWC for ultra-fast builds) Styling: Tailwind CSS 3.4+ with custom design system State Management: Zustand 4.0+ (lightweight) or Redux Toolkit 2.0+ UI Components: Headless UI 2.0+ + Radix UI + Custom Components Charts/Analytics: Recharts 2.8+ or Chart.js 4.0+ with React wrapper Icons: Lucide React 0.400+ (latest icon set) Routing: React Router v6+ or Next.js 14+ App Router Data Fetching: TanStack Query v5+ (React Query) Form Handling: React Hook Form 7.0+ with Zod validation Authentication: NextAuth.js v5 or Clerk Testing: Vitest + React Testing Library Deployment: Vercel, Netlify, or AWS Amplify PWA Support: Vite PWA plugin for offline capabilities ``` ### **Advanced Project Structure (Modular & Maintainable)** ``` src/ ├── app/ # Next.js 14 App Router (if using Next.js) ├── components/ │ ├── ui/ # Reusable UI components │ │ ├── Button/ │ │ ├── Card/ │ │ ├── Chart/ │ │ └── Table/ │ ├── layout/ # Layout components │ │ ├── Sidebar/ │ │ ├── Header/ │ │ └── Navigation/ │ ├── modules/ # Module-specific components │ │ ├── electricity/ │ │ ├── water/ │ │ ├── stp/ │ │ ├── contractor/ │ │ └── reserve-fund/ │ └── common/ # Shared components ├── hooks/ # Custom React hooks ├── lib/ # Utility libraries ├── stores/ # State management ├── types/ # TypeScript type definitions ├── styles/ # Global styles and themes ├── data/ # Mock data and constants ├── utils/ # Helper functions └── tests/ # Test files ``` ### **Performance & Modern Features** ``` Code Splitting: React.lazy() + Suspense for module-based loading Virtual Scrolling: For large data tables (@tanstack/react-virtual) Image Optimization: Next.js Image or modern lazy loading Bundle Analysis: Built-in Vite bundle analyzer Error Boundaries: React error boundaries with Sentry integration Accessibility: Full WCAG 2.1 AA compliance with React Aria Internationalization: React-i18next for multi-language support Dark/Light Mode: System preference detection with smooth transitions ``` ## 🎨 Complete Design System (Based on Full Application Screenshots) ### **Application Layout Structure** ```jsx <AppLayout> <Sidebar> {/* Dark purple/gray sidebar */} <Logo /> {/* Muscat Bay logo */} <Navigation> <NavItem icon="⚡" label="Electricity System" color="purple" /> <NavItem icon="💧" label="Water Analysis" color="blue" /> <NavItem icon="🏭" label="STP Plant" color="green" /> <NavItem icon="💰" label="Reserve Fund" color="teal" badge="NEW" /> <NavItem icon="👷" label="Contractor Tracker" color="orange" /> </Navigation> <Footer> <UserProfile /> <SettingsAccess /> </Footer> </Sidebar> <MainContent> <TopHeader> {/* White header with search, notifications */} <BreadcrumbNavigation /> <SearchBar /> <NotificationBell /> <UserAvatar /> </TopHeader> <ContentArea> {/* Module-specific content */} <ModuleDashboard /> </ContentArea> </MainContent> </AppLayout> ``` ### **Enhanced Color System (Module-Specific Themes)** ```css :root { /* Sidebar & Global Colors */ --sidebar-bg: #2d2438; /* Dark purple sidebar background */ --sidebar-text: #ffffff; /* White text in sidebar */ --sidebar-text-muted: #a8a3b8; /* Muted text in sidebar */ --sidebar-hover: #3a2f47; /* Hover state for sidebar items */ --sidebar-active: #5f5168; /* Active sidebar item */ /* Global App Colors */ --app-background: #f8fafc; /* Light gray app background */ --header-bg: #ffffff; /* White header background */ --content-bg: #ffffff; /* White content background */ --border-color: #e2e8f0; /* Light gray borders */ --text-primary: #1e293b; /* Dark text */ --text-secondary: #64748b; /* Gray text */ --text-muted: #94a3b8; /* Light gray text */ /* Module-Specific Color Themes */ /* Electricity System - Purple Theme */ --electricity-primary: #5f5168; --electricity-light: #ede9fe; --electricity-accent: #8b5cf6; /* Water Analysis - Blue Theme */ --water-primary: #3b82f6; --water-light: #dbeafe; --water-accent: #06b6d4; --water-success: #10b981; --water-warning: #f59e0b; --water-danger: #ef4444; /* STP Plant - Green Theme */ --stp-primary: #10b981; --stp-light: #d1fae5; --stp-accent: #059669; /* Reserve Fund - Teal Theme */ --reserve-primary: #06b6d4; --reserve-light: #cffafe; --reserve-accent: #0891b2; /* Contractor Tracker - Orange Theme */ --contractor-primary: #f59e0b; --contractor-light: #fef3c7; --contractor-accent: #d97706; /* Status & Alert Colors */ --success: #10b981; --warning: #f59e0b; --danger: #ef4444; --info: #3b82f6; /* Chart Colors (Consistent across modules) */ --chart-color-1: #5f5168; /* Primary purple */ --chart-color-2: #3b82f6; /* Blue */ --chart-color-3: #10b981; /* Green */ --chart-color-4: #f59e0b; /* Orange */ --chart-color-5: #06b6d4; /* Teal */ --chart-color-6: #8b5cf6; /* Light purple */ } ``` ### **Responsive Design System (All Screen Sizes)** ```scss /* Mobile First Approach */ .container { padding: 1rem; @media (min-width: 640px) { /* Tablet */ padding: 1.5rem; } @media (min-width: 1024px) { /* Desktop */ padding: 2rem; } @media (min-width: 1280px) { /* Large Desktop */ padding: 2.5rem; } } /* Sidebar Responsiveness */ .sidebar { width: 100%; position: fixed; bottom: 0; height: auto; @media (min-width: 768px) { width: 280px; position: fixed; left: 0; top: 0; height: 100vh; } } /* Content Area Adjustments */ .main-content { margin-left: 0; padding-bottom: 80px; /* Space for mobile bottom nav */ @media (min-width: 768px) { margin-left: 280px; padding-bottom: 0; } } /* Grid Systems for Different Modules */ .metrics-grid { display: grid; gap: 1rem; grid-template-columns: 1fr; @media (min-width: 640px) { grid-template-columns: repeat(2, 1fr); } @media (min-width: 1024px) { grid-template-columns: repeat(4, 1fr); gap: 1.5rem; } } .charts-grid { display: grid; gap: 1.5rem; grid-template-columns: 1fr; @media (min-width: 1024px) { grid-template-columns: 1.5fr 1fr; } } ``` ### **Modern UI Component Specifications** #### **Sidebar Navigation (Dark Theme)** ```scss .sidebar { background: var(--sidebar-bg); color: var(--sidebar-text); width: 280px; height: 100vh; position: fixed; left: 0; top: 0; overflow-y: auto; z-index: 50; } .sidebar-logo { padding: 1.5rem; border-bottom: 1px solid rgba(255, 255, 255, 0.1); } .nav-item { display: flex; align-items: center; padding: 0.75rem 1.5rem; color: var(--sidebar-text-muted); transition: all 0.2s ease; cursor: pointer; &:hover { background: var(--sidebar-hover); color: var(--sidebar-text); } &.active { background: var(--sidebar-active); color: var(--sidebar-text); border-right: 3px solid currentColor; } } .nav-icon { width: 20px; height: 20px; margin-right: 0.75rem; } .nav-badge { margin-left: auto; background: var(--success); color: white; font-size: 0.75rem; padding: 0.25rem 0.5rem; border-radius: 0.375rem; } ``` #### **Module Header with Tabs** ```scss .module-header { background: var(--content-bg); border-bottom: 1px solid var(--border-color); padding: 1rem 0; } .module-tabs { display: flex; gap: 0.5rem; margin-bottom: 1rem; } .tab-button { padding: 0.5rem 1rem; border-radius: 0.5rem; background: transparent; color: var(--text-secondary); font-weight: 500; transition: all 0.2s ease; &.active { background: var(--module-primary); color: white; } &:hover:not(.active) { background: var(--module-light); color: var(--module-primary); } } ``` #### **Enhanced Metric Cards** ```scss .metric-card { background: var(--content-bg); border-radius: 0.75rem; padding: 1.5rem; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1); border: 1px solid var(--border-color); transition: all 0.2s ease; &:hover { transform: translateY(-2px); box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); } } .metric-value { font-size: 2rem; font-weight: 700; color: var(--text-primary); line-height: 1.2; margin-bottom: 0.25rem; } .metric-unit { font-size: 0.875rem; font-weight: 400; color: var(--text-muted); margin-left: 0.25rem; } .metric-label { font-size: 0.875rem; font-weight: 600; color: var(--text-primary); margin-bottom: 0.25rem; } .metric-subtitle { font-size: 0.75rem; color: var(--text-secondary); } .metric-icon { width: 3rem; height: 3rem; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-left: auto; flex-shrink: 0; } ``` ## 📊 Core Application Sections & Detailed Requirements ### 1. **Electricity Analysis Module** (Primary Reference Design) **Purpose:** Enhanced Electricity System - Complete Database monitoring and analysis **Page Structure (Exact Match to Screenshot):** #### **Header Navigation Tabs:** - Dashboard (active) - Performance - Analytics - Unit Details #### **Filter Section (Always Visible):** ```jsx <FilterBar> <FilterDropdown label="Filter by Month" options={["All Months", "January", "February", ...]} /> <FilterDropdown label="Filter by Category" options={["All Categories", "Development Building", "Commercial/Retail", "Lifting Station", ...]} /> <FilterDropdown label="Filter by Asset Type" options={["All Asset Types", "Building", "Infrastructure", ...]} /> <FilterDropdown label="Filter by Zone" options={["All Zones", "Zone 1", "Zone 2", "Zone 3"]} /> <ResetButton>Reset All</ResetButton> </FilterBar> ``` #### **Page Title Section:** - Main title: "Enhanced Electricity System - Complete Database" - Info tags showing: Asset Types count, Categories count, Zones count, Total items count - "AI Analysis" button on the right #### **Key Metrics Cards (4-Column Grid):** ```jsx <MetricsGrid> <MetricCard title="Total Consumption" value="1,738,034" unit="kWh" subtitle="Overall" icon={<PowerIcon />} iconColor="gray" /> <MetricCard title="Total Est. Cost" value="43,450.86" unit="OMR" subtitle="Based on selection" icon={<CurrencyIcon />} iconColor="green" /> <MetricCard title="Avg. Consumption/Unit" value="31,036" unit="kWh" subtitle="Overall" icon={<AverageIcon />} iconColor="orange" /> <MetricCard title="Active Meters" value="52" unit="units" subtitle="In selection" icon={<MeterIcon />} iconColor="blue" /> </MetricsGrid> ``` #### **Charts Section (2-Column Layout):** ```jsx <ChartsGrid> <ChartCard title="Consumption Trend (14 Months)" subtitle="Complete data coverage: Apr-24 to May-25 • Filters: All Categories, All Types, All Zones"> <LineChart data={consumptionTrendData} /> </ChartCard> <ChartCard title="Consumption by Category" subtitle="For all data"> <DonutChart data={categoryData} centerValue="1,738,034" centerLabel="Total kWh" categories={[ {name: "Development Building", color: "#8b5cf6"}, {name: "Commercial/Retail", color: "#f59e0b"}, {name: "Lifting Station", color: "#10b981"}, {name: "Irrigation Tank", color: "#06b6d4"} ]} /> </ChartCard> </ChartsGrid> ``` #### **Top Consumers Table:** ```jsx <DataTable title="Top Electricity Consumers" subtitle="Performance ranking for overall period" sortBy="Consumption" showCount="15 Total Units" columns={[ {field: "unitDetails", header: "Unit Details", subtext: true}, {field: "category", header: "Category", type: "tag"}, {field: "consumption", header: "Consumption", type: "number", unit: "kWh"}, {field: "estCost", header: "Est. Cost", type: "currency", unit: "OMR"}, {field: "performance", header: "Performance", type: "progressBar"}, {field: "actions", header: "Actions", type: "button"} ]} data={[ { unitDetails: {name: "Beachwell", subtext: "Meter: SRLW2411 • Type: G_Building"}, category: {label: "Development Building", color: "purple"}, consumption: {value: 311962, unit: "kWh"}, estCost: {value: 7799.05, unit: "OMR"}, performance: {percent: 85, color: "gray"} }, // ... more rows ]} pagination={true} /> ``` #### **Category Performance Overview (Grid Layout):** ```jsx <CategoryGrid> <CategoryCard title="Actuator DB" units={0} total="9,713.1 kWh" average="1519 kWh" /> <CategoryCard title="Commercial/Retail" units={2} total="199,577 kWh" average="99289 kWh" /> <CategoryCard title="Development Building" units={38} total="1,186,689 kWh" average="42463 kWh" /> <CategoryCard title="Irrigation Tank" units={1} total="69,773.2 kWh" average="17463 kWh" /> <CategoryCard title="Landscape Light (Zone 3)" units={6} total="648 kWh" average="216 kWh" /> <CategoryCard title="Lifting Station" units={4} total="58,142 kWh" average="14536 kWh" /> <CategoryCard title="Pumping Station" units={4} total="85,752.1 kWh" average="21438 kWh" /> <CategoryCard title="Street Light" units={5} total="128,748 kWh" average="27750 kWh" /> </CategoryGrid> ``` **Key Features (Matching Screenshot Functionality):** - Multi-level filtering system with real-time updates - Interactive time-series trending (14+ months) - Category-based consumption breakdown with donut visualization - Performance ranking table with sortable columns - Color-coded category identification system - Pagination for large datasets - Export functionality for reports - Responsive card-based layout ### 2. **Water Analysis Module** (Based on Screenshot Evidence) **Purpose:** Complete Water Infrastructure and Quality Management **Page Structure (Exact Match to Water Analysis Screenshot):** #### **Header Navigation Tabs:** - Dashboard (active) - Zone Analysis - Category Analysis - Performance Metrics #### **Month Selection:** ```jsx <MonthSelector> <DatePicker label="Select Month" value="May 25" /> <ActionButton variant="primary">AI Analysis</ActionButton> </MonthSelector> ``` #### **Key Water Metrics Cards (3-Column Grid):** ```jsx <MetricsGrid> <MetricCard title="A1: Main Bulk (L1)" value="58,425" unit="m³" subtitle="For May-25 • Historical data" icon={<WaterSourceIcon />} iconColor="blue" /> <MetricCard title="A2: Billed Bulk (L2+DC)" value="63,270" unit="m³" subtitle="For May-25 • Historical data" icon={<WaterMeterIcon />} iconColor="green" /> <MetricCard title="A3: Billed Indiv. (L3+DC)" value="44,497" unit="m³" subtitle="For May-25 • Historical data" icon={<WaterDistributionIcon />} iconColor="orange" /> </MetricsGrid> ``` #### **Water Loss Metrics (3-Column Grid with Alert Indicators):** ```jsx <LossMetricsGrid> <LossMetricCard title="Loss 1 (A1-A2)" value="-4,845" unit="m³" percentage="8.3% of A1" icon={<AlertIcon />} status="critical" color="red" /> <LossMetricCard title="Loss 2 (A2-A3)" value="18,773" unit="m³" percentage="29.7% of A2" icon={<WarningIcon />} status="warning" color="orange" /> <LossMetricCard title="Total Apparent Loss" value="13,928" unit="m³" percentage="23.8% of total supply" icon={<AlertIcon />} status="critical" color="red" /> </LossMetricsGrid> ``` #### **Charts Section (2-Column Layout):** ```jsx <ChartsGrid> <ChartCard title="Loss Trend Analysis (m³)" subtitle="Monthly water loss patterns"> <MultiLineChart data={lossAnalysisData} lines={[ {key: "loss1", color: "#ef4444", label: "Loss 1 (m³)"}, {key: "loss2", color: "#f59e0b", label: "Loss 2 (m³)"}, {key: "totalLoss", color: "#6b7280", label: "Total Loss (m³)"} ]} /> </ChartCard> <ChartCard title="Water Flow by Level (Last 6 Months)" subtitle="System hierarchy analysis"> <StackedBarChart data={waterFlowData} categories={[ {key: "a1MainBulk", color: "#4b5563", label: "A1 (Main Bulk)"}, {key: "a2BilledBulk", color: "#10b981", label: "A2 (Billed Bulk)"}, {key: "a3BilledIndiv", color: "#8b5cf6", label: "A3 (Billed Indiv.)"} ]} /> </ChartCard> </ChartsGrid> ``` #### **Water Loss Analysis Features:** - **Real-time Loss Calculations** - Automatic computation of A1-A2, A2-A3 losses - **Trend Analysis** - Multi-line charts showing loss patterns over time - **Alert System** - Visual indicators for critical loss percentages - **Hierarchical Flow Monitoring** - Stacked charts showing flow levels - **Historical Comparison** - Month-over-month analysis capabilities ### 3. **STP Plant Module** (Wastewater Treatment Operations) **Purpose:** Sewage Treatment Plant Operations and Environmental Compliance #### **Key Metrics Cards:** ```jsx <MetricsGrid> <MetricCard title="Daily Inflow" value="3,200,000" unit="L" subtitle="Peak capacity 85%" icon={<InflowIcon />} iconColor="blue" /> <MetricCard title="Treatment Efficiency" value="98.5" unit="%" subtitle="Above standard (95%)" icon={<EfficiencyIcon />} iconColor="green" /> <MetricCard title="BOD Removal" value="96.2" unit="%" subtitle="Excellent performance" icon={<TreatmentIcon />} iconColor="green" /> <MetricCard title="Sludge Production" value="450" unit="kg/day" subtitle="Within normal range" icon={<SludgeIcon />} iconColor="orange" /> </MetricsGrid> ``` #### **Process Monitoring Charts:** - **Treatment Process Flow** - Real-time process diagram with status indicators - **Effluent Quality Trends** - BOD, COD, TSS parameter tracking - **Chemical Consumption** - Dosing optimization charts - **Equipment Performance** - Pump efficiency and maintenance schedules ### 4. **Contractor Tracker Module** (Project & Vendor Management) **Purpose:** Comprehensive Project and Contractor Performance Management #### **Key Metrics Cards:** ```jsx <MetricsGrid> <MetricCard title="Active Projects" value="15" unit="projects" subtitle="12 on schedule" icon={<ProjectIcon />} iconColor="purple" /> <MetricCard title="Total Contract Value" value="2,450,000" unit="OMR" subtitle="FY 2025 portfolio" icon={<ContractIcon />} iconColor="green" /> <MetricCard title="Completion Rate" value="87" unit="%" subtitle="Above target (85%)" icon={<CompletionIcon />} iconColor="green" /> <MetricCard title="Budget Variance" value="-3.2" unit="%" subtitle="Under budget" icon={<BudgetIcon />} iconColor="green" /> </MetricsGrid> ``` #### **Project Management Features:** - **Interactive Gantt Charts** - Project timeline visualization - **Contractor Scorecards** - Performance rating system - **Financial Tracking** - Budget vs actual analysis - **Resource Management** - Workforce and equipment allocation ### 5. **Reserve Fund Module** (Financial Asset Management) **Purpose:** Strategic Financial Planning and Asset Reserve Optimization #### **Key Metrics Cards:** ```jsx <MetricsGrid> <MetricCard title="Total Fund Value" value="8,500,000" unit="OMR" subtitle="↑ 5.2% YoY growth" icon={<FundIcon />} iconColor="green" /> <MetricCard title="Available Liquid Assets" value="1,200,000" unit="OMR" subtitle="14.1% of total fund" icon={<LiquidityIcon />} iconColor="blue" /> <MetricCard title="YTD Expenditure" value="450,000" unit="OMR" subtitle="37.5% of annual budget" icon={<ExpenseIcon />} iconColor="orange" /> <MetricCard title="ROI Performance" value="7.8" unit="%" subtitle="Above benchmark (6.5%)" icon={<ROIIcon />} iconColor="green" /> </MetricsGrid> ``` #### **Financial Analytics:** - **Portfolio Allocation** - Asset distribution charts - **Performance Attribution** - Investment category analysis - **Cash Flow Forecasting** - Predictive financial modeling - **Risk Assessment** - Volatility and exposure metrics ## 🎯 Consistent Design Elements Across All Modules ### **Universal Page Structure:** ```jsx <ModulePage> <TabNavigation tabs={["Dashboard", "Performance", "Analytics", "Unit Details"]} /> <FilterBar filters={moduleSpecificFilters} /> <PageHeader title={moduleName} subtitle="Complete Database" /> <MetricsGrid> {/* 4 metric cards specific to each module */} </MetricsGrid> <ChartsSection> {/* 2-column chart layout */} </ChartsSection> <DataTableSection> {/* Primary data table with ranking/performance */} </DataTableSection> <CategoryOverview> {/* Grid of category-specific performance cards */} </CategoryOverview> </ModulePage> ``` ### **Color Coding System:** - **Electricity:** Primary purple (#5f5168) - **Water:** Blue (#3b82f6) - **STP Plant:** Green (#10b981) - **Contractor Tracker:** Orange (#f59e0b) - **Reserve Fund:** Teal (#06b6d4) ### **Standard Interactive Features:** - Multi-level filtering (Month, Category, Asset Type, Zone) - Sortable data tables with pagination - Exportable reports (PDF, Excel, CSV) - Responsive design for all screen sizes - Consistent hover effects and transitions - Real-time data updates where applicable ## 🔧 Core UI Components (Based on Reference Design) ### Essential Components to Build #### **1. Navigation Components** ```jsx // Tab navigation (Dashboard, Performance, Analytics, Unit Details) <TabNavigation /> // Filter bar with dropdowns and reset <FilterBar> <FilterDropdown /> <ResetButton /> </FilterBar> // Page header with title and action buttons <PageHeader title="Enhanced Electricity System" subtitle="Complete Database"> <InfoTags /> <ActionButton>AI Analysis</ActionButton> </PageHeader> ``` #### **2. Data Display Components** ```jsx // Metric cards with icons and values <MetricCard value="1,738,034" unit="kWh" label="Total Consumption" icon={PowerIcon} iconColor="gray" /> // Data table with sorting, filtering, and pagination <DataTable title="Top Electricity Consumers" columns={columns} data={data} sortable={true} pagination={true} /> // Category performance grid <CategoryGrid> <CategoryCard /> </CategoryGrid> ``` #### **3. Chart Components** ```jsx // Line chart for consumption trends <LineChart data={consumptionData} xAxis="months" yAxis="consumption" title="Consumption Trend (14 Months)" /> // Donut chart with center value <DonutChart data={categoryData} centerValue="1,738,034" centerLabel="Total kWh" legend={true} /> ``` #### **4. Interactive Elements** ```jsx // Category tags with colors <CategoryTag category="Development Building" color="purple" /> // Performance indicators <PerformanceBar percentage={85} color="success" /> // Action buttons <ActionButton variant="primary">View Details</ActionButton> ``` ### Layout Patterns (Matching Screenshot) #### **Page Structure Template:** ```jsx <PageLayout> <TopNavigation /> <FilterSection /> <PageHeader /> <MainContent> <MetricsRow> {/* 4 metric cards */} <MetricCard /> <MetricCard /> <MetricCard /> <MetricCard /> </MetricsRow> <ChartsSection> {/* 2-column charts */} <ChartCard> <LineChart /> </ChartCard> <ChartCard> <DonutChart /> </ChartCard> </ChartsSection> <DataSection> <DataTable /> </DataSection> <CategorySection> <CategoryGrid /> </CategorySection> </MainContent> </PageLayout> ``` #### **Responsive Grid System:** ```scss .metrics-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 24px; margin-bottom: 32px; @media (max-width: 1024px) { grid-template-columns: repeat(2, 1fr); } @media (max-width: 640px) { grid-template-columns: 1fr; } } .charts-grid { display: grid; grid-template-columns: 1.5fr 1fr; gap: 24px; margin-bottom: 32px; @media (max-width: 1024px) { grid-template-columns: 1fr; } } .category-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; } ``` ## 🚀 Implementation Guidelines (Screenshot-Based Development) ### Phase 1: Core Foundation (Matching Reference Design) 1. **Initialize Project Structure** ```bash npm create vite@latest muscat-bay-app -- --template react-ts cd muscat-bay-app npm install tailwindcss recharts lucide-react @headlessui/react ``` 2. **Set Up Design System** ```jsx // src/styles/globals.css @tailwind base; @tailwind components; @tailwind utilities; @layer base { :root { --primary: #5f5168; --surface: #ffffff; --background: #f8f9fa; /* ... other color variables from screenshot */ } } @layer components { .metric-card { @apply bg-white rounded-xl p-6 shadow-sm border border-gray-200; } .filter-dropdown { @apply bg-white border border-gray-200 rounded-md px-3 py-2 text-sm; } .category-tag { @apply px-3 py-1 rounded-full text-xs font-medium; } } ``` ### Phase 2: Exact Component Implementation #### **MetricCard Component (Exact Match)** ```jsx // src/components/MetricCard.tsx interface MetricCardProps { title: string; value: string | number; unit: string; subtitle: string; icon: React.ReactNode; iconColor: 'gray' | 'green' | 'orange' | 'blue'; } export const MetricCard: React.FC<MetricCardProps> = ({ title, value, unit, subtitle, icon, iconColor }) => { const iconColorClasses = { gray: 'bg-gray-100 text-gray-600', green: 'bg-green-100 text-green-600', orange: 'bg-orange-100 text-orange-600', blue: 'bg-blue-100 text-blue-600', }; return ( <div className="metric-card"> <div className="flex items-start justify-between"> <div> <div className="text-2xl font-bold text-gray-900 mb-1"> {value.toLocaleString()} <span className="text-sm font-normal text-gray-500">{unit}</span> </div> <div className="text-sm font-medium text-gray-700">{title}</div> <div className="text-xs text-gray-500">{subtitle}</div> </div> <div className={`w-12 h-12 rounded-full flex items-center justify-center ${iconColorClasses[iconColor]}`}> {icon} </div> </div> </div> ); }; ``` #### **FilterBar Component (Exact Match)** ```jsx // src/components/FilterBar.tsx interface FilterOption { value: string; label: string; } interface FilterBarProps { filters: { month: FilterOption[]; category: FilterOption[]; assetType: FilterOption[]; zone: FilterOption[]; }; onFilterChange: (filterType: string, value: string) => void; onReset: () => void; } export const FilterBar: React.FC<FilterBarProps> = ({ filters, onFilterChange, onReset }) => { return ( <div className="bg-white px-6 py-4 border-b border-gray-200 flex items-center gap-4 flex-wrap"> <FilterDropdown label="Filter by Month" options={filters.month} onChange={(value) => onFilterChange('month', value)} /> <FilterDropdown label="Filter by Category" options={filters.category} onChange={(value) => onFilterChange('category', value)} /> <FilterDropdown label="Filter by Asset Type" options={filters.assetType} onChange={(value) => onFilterChange('assetType', value)} /> <FilterDropdown label="Filter by Zone" options={filters.zone} onChange={(value) => onFilterChange('zone', value)} /> <button onClick={onReset} className="ml-auto bg-gray-800 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-900" > Reset All </button> </div> ); }; ``` #### **DataTable Component (Exact Match)** ```jsx // src/components/DataTable.tsx interface TableColumn { field: string; header: string; type?: 'text' | 'tag' | 'number' | 'currency' | 'progressBar' | 'button'; unit?: string; } interface DataTableProps { title: string; subtitle: string; columns: TableColumn[]; data: any[]; sortBy?: string; showCount?: string; pagination?: boolean; } export const DataTable: React.FC<DataTableProps> = ({ title, subtitle, columns, data, sortBy, showCount, pagination }) => { return ( <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"> {/* Header */} <div className="bg-primary text-white px-6 py-4 flex items-center justify-between"> <div> <h3 className="text-lg font-semibold">{title}</h3> <p className="text-sm opacity-90">{subtitle}</p> </div> <div className="text-right"> <div className="text-2xl font-bold">{showCount}</div> {sortBy && <div className="text-sm opacity-90">Sort by: {sortBy}</div>} </div> </div> {/* Table */} <div className="overflow-x-auto"> <table className="w-full"> <thead className="bg-gray-50"> <tr> {columns.map((column) => ( <th key={column.field} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> {column.header} </th> ))} </tr> </thead> <tbody className="bg-white divide-y divide-gray-200"> {data.map((row, index) => ( <tr key={index} className="hover:bg-gray-50"> {columns.map((column) => ( <td key={column.field} className="px-6 py-4 whitespace-nowrap"> {renderTableCell(row[column.field], column.type)} </td> ))} </tr> ))} </tbody> </table> </div> {/* Pagination */} {pagination && ( <div className="bg-gray-50 px-6 py-3 flex items-center justify-between"> <div className="text-sm text-gray-700">Showing 1 to 6 of 15 consumers</div> <div className="flex items-center space-x-2"> <button className="px-3 py-1 text-sm border rounded">Previous</button> <button className="px-3 py-1 text-sm bg-primary text-white rounded">1</button> <button className="px-3 py-1 text-sm border rounded">2</button> <button className="px-3 py-1 text-sm border rounded">3</button> <button className="px-3 py-1 text-sm border rounded">Next</button> </div> </div> )} </div> ); }; ``` ### Phase 3: Chart Integration (Matching Screenshot Charts) #### **Line Chart (Consumption Trend)** ```jsx // src/components/ConsumptionTrendChart.tsx import { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from 'recharts'; export const ConsumptionTrendChart: React.FC<{data: any[]}> = ({ data }) => { return ( <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200"> <div className="mb-4"> <h3 className="text-lg font-semibold text-gray-900">Consumption Trend (14 Months)</h3> <p className="text-sm text-gray-500">Complete data coverage: Apr-24 to May-25 • Filters: All Categories, All Types, All Zones</p> </div> <div className="h-80"> <ResponsiveContainer width="100%" height="100%"> <LineChart data={data}> <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" /> <XAxis dataKey="month" axisLine={false} tickLine={false} tick={{ fontSize: 12, fill: '#6b7280' }} /> <YAxis axisLine={false} tickLine={false} tick={{ fontSize: 12, fill: '#6b7280' }} /> <Line type="monotone" dataKey="consumption" stroke="#5f5168" strokeWidth={2} dot={{ fill: '#5f5168', strokeWidth: 2, r: 4 }} /> </LineChart> </ResponsiveContainer> </div> </div> ); }; ``` #### **Donut Chart (Consumption by Category)** ```jsx // src/components/ConsumptionDonutChart.tsx import { PieChart, Pie, Cell, ResponsiveContainer, Legend } from 'recharts'; const CATEGORY_COLORS = { 'Development Building': '#8b5cf6', 'Commercial/Retail': '#f59e0b', 'Lifting Station': '#10b981', 'Irrigation Tank': '#06b6d4' }; export const ConsumptionDonutChart: React.FC<{data: any[], total: string}> = ({ data, total }) => { return ( <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200"> <div className="mb-4"> <h3 className="text-lg font-semibold text-gray-900">Consumption by Category</h3> <p className="text-sm text-gray-500">For all data</p> </div> <div className="h-80 relative"> <ResponsiveContainer width="100%" height="100%"> <PieChart> <Pie data={data} cx="50%" cy="50%" innerRadius={60} outerRadius={100} dataKey="value" > {data.map((entry, index) => ( <Cell key={`cell-${index}`} fill={CATEGORY_COLORS[entry.name]} /> ))} </Pie> <Legend verticalAlign="bottom" height={36} formatter={(value) => <span className="text-sm text-gray-600">{value}</span>} /> </PieChart> </ResponsiveContainer> {/* Center value */} <div className="absolute inset-0 flex items-center justify-center"> <div className="text-center"> <div className="text-2xl font-bold text-gray-900">{total}</div> <div className="text-sm text-gray-500">Total kWh</div> </div> </div> </div> </div> ); }; ``` ### AI Development Protocol for This Project When asked to implement any part of this application, the AI should: 1. **Reference the Screenshot Design** - Always match the exact visual style, spacing, and layout shown 2. **Use the Exact Color Palette** - Apply the specific color codes extracted from the reference 3. **Implement Complete Components** - Provide fully functional components with proper TypeScript types 4. **Include Responsive Behavior** - Ensure components work on mobile, tablet, and desktop 5. **Add Interactive Features** - Include hover states, sorting, filtering as shown in screenshot 6. **Provide Sample Data** - Include realistic data examples that match the format shown ## 🎯 AI Prompt Engineering Guidelines ### Context Understanding When working on this project, the AI should: 1. **Prioritize Data Visualization:** Every module should prominently feature charts, graphs, and visual data representations 2. **Maintain Professional Standards:** Code should be production-ready with proper error handling and TypeScript types 3. **Focus on User Experience:** Interfaces should be intuitive for executive-level users 4. **Ensure Scalability:** Components should be reusable and maintainable ### Quality Standards - **Code Quality:** Use ESLint, Prettier, and strict TypeScript - **Performance:** Implement lazy loading, code splitting, and optimization - **Accessibility:** Ensure WCAG compliance and keyboard navigation - **Testing:** Include unit tests for critical components ### Communication Protocol When the AI receives requests for this project: 1. Confirm understanding of the specific module/feature 2. Clarify any data structure requirements 3. Provide complete, working code with explanations 4. Suggest improvements or best practices 5. Offer next steps or related enhancements --- ## 📝 Next Steps & Questions for Clarification To maximize the effectiveness of this custom instruction set, please provide: 1. **Data Sources:** What types of databases or APIs will provide the operational data? 2. **Real-time Requirements:** Which metrics need live updates vs. periodic refreshes? 3. **User Roles:** Are there different permission levels or user types to consider? 4. **Integration Needs:** Any existing systems that need to be integrated? 5. **Deployment Environment:** Preferred hosting and deployment strategy? This comprehensive instruction set will enable any AI to understand the full scope and requirements of your Muscat Bay Assets & Operation application, ensuring consistent, high-quality development assistance. __ FYI related the pouncing Pricing : - Water : 1 m3 / 1.32 OMR - Electricity: 1 KWH / 0.025 OMR